// Simple C++ program to find length of
// the largest subsequence with GCD greater
// than 1.
#include<bits/stdc++.h>
 
using namespace std;
 
// Returns length of the largest subsequence
// with GCD more than 1.
int largestGCDSubsequence(int arr[], int n)
{
    int ans = 0;
 
    // Finding the Maximum value in arr[]
    int maxele = *max_element(arr, arr+n);
 
    // Iterate from 2 to maximum possible
    // divisor of all give values
    for (int i=2; i<=maxele; ++i)
    {
        int count = 0;
        for (int j=0; j<n; ++j)
        {
            // If we found divisor,
            // increment count
            if (arr[j]%i == 0)
                ++count;
        }
        ans = max(ans, count);
    }
 
    return ans;
}
 
// Driver code
int main()
{
    int arr[] = {3, 6, 2, 5, 4};
    int size = sizeof(arr) / sizeof(arr[0]);
    cout << largestGCDSubsequence(arr, size);
    return 0;
}
